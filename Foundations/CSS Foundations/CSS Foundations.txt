At the most basic level, CSS is made up of various rules. These rules 
are made up of a selector (more on this in a bit) and a semi-colon 
separated list of declarations, with each of those declarations being 
made up of a property:value pair.

A <div> is one of the basic HTML elements. It is simply an empty 
container. In general, it is best to use other tags such as <h1> or 
<p> for content in your projects, but as we learn more about CSS you’ll 
find that there are many cases where the thing you need is just a 
container for other elements. Many of our exercises use plain <div>s 
for simplicity.

Selectors simply refer to the HTML elements to which CSS rules apply; 
they’re what is actually being “selected” for each rule. The following 
subsections don’t cover every selector available, but they’re by far 
the most common and the ones you should get comfortable using first.

The universal selector will select elements of any type, hence the 
name “universal”, and the syntax for it is a simple asterisk.

A type selector (or element selector) will select all elements of the 
given element type, and the syntax is just the name of the element

Class selectors will select all elements with the given class, which 
is just an attribute you place on an HTML element. Here’s how you add 
a class to an HTML tag and select it in CSS

Note the syntax for class selectors: a period immediately followed by 
the case-sensitive value of the class attribute. Classes aren’t required 
to be unique, so you can use the same class on as many elements as you 
want. Another thing you can do with the class attribute is to add 
multiple classes to a single element as a space-separated list, such as 
class="alert-text severe-alert". Since whitespace is used to separate 
class names like this, you should never use spaces for multi-worded 
names and should use a hyphen instead.

ID selectors are similar to class selectors. They select an element 
with the given ID, which is another attribute you place on an HTML 
element

Instead of a period, we use a hashtag immediately followed by the 
case-sensitive value of the ID attribute. A common pitfall is people 
overusing the ID attribute when they don’t necessarily need to, and 
when classes will suffice. While there are cases where using an ID 
makes sense or is needed, such as taking advantage of specificity or 
having links redirect to a section on the current page, you should use 
IDs sparingly (if at all). The major difference between classes and 
IDs is that an element can only have one ID. An ID cannot be repeated 
on a single page, and the ID attribute should not contain any 
whitespace at all.

What if we have two groups of elements that share some of their style 
declarations? Both our .read and .unread selectors share the color: 
white; and background-color: black; declarations, but otherwise have 
several of their own unique declarations. To cut down on the repetition, 
we can group these two selectors together as a comma-separated list. 
Both of the examples above (with and without grouping) will have the 
same result, but the second example reduces the repetition of 
declarations and makes it easier to edit either the color or 
background-color for both classes at once.

What if we have two groups of elements that share some of their style 
declarations? Both our .read and .unread selectors share the 
color: white; and background-color: black; declarations, but otherwise 
have several of their own unique declarations. To cut down on the 
repetition, we can group these two selectors together as a 
comma-separated list. Both of the examples above (with and without 
grouping) will have the same result, but the second example reduces 
the repetition of declarations and makes it easier to edit either the 
color or background-color for both classes at once. 

Another way to use selectors is to chain them as a list without any 
separation. We have two elements with the subsection class that have 
some sort of unique styles, but what if we only want to apply a 
separate rule to the element that also has header as a second class? 
Well, we could chain both the class selectors together in our CSS like 
so. What .subsection.header does is it selects any element that has 
both the subsection and header classes. Notice how there isn’t any 
space between the .subsection and .header class selectors. This syntax 
basically works for chaining any combination of selectors, except for 
chaining more than one type selector.

Combinators allow us to combine multiple selectors differently than 
either grouping or chaining them, as they show a relationship between 
the selectors. There are four types of combinators in total, but for 
right now we’re going to only show you the descendant combinator, which 
is represented in CSS by a single space between selectors. A descendant 
combinator will only cause elements that match the last selector to be 
selected if they also have an ancestor (parent, grandparent, etc) that 
matches the previous selector. So something like .ancestor .child would 
select an element with the class child if it has an ancestor with the 
class ancestor. Another way to think of it is child will only be 
selected if it is nested inside of ancestor, no matter how deep. In the 
above example, the first two elements with the contents 
class (B and C) would be selected, but that last element (D) won’t be. 
There’s really no limit to how many combinators you can add to a rule, 
so .one .two .three .four would be totally valid. This would just 
select an element that has a class of four if it has an ancestor with a 
class of three, and if that ancestor has its own ancestor with a class 
of two, and so on. You generally want to avoid trying to select 
elements that need this level of nesting, though, as it can get pretty 
confusing and long, and it can cause issues when it comes to 
specificity.

color and background-color
The color property sets an element’s text color, while background-color 
sets, well, the background color of an element. A common one is a 
keyword, such as an actual color name like red or the transparent 
keyword. They also accept HEX, RGB, and HSL values, which you may be 
familiar with if you’ve ever used a photoshop program or a site where 
you could customize your profile colors. Typography Basics and 
text-align font-family can be a single value or a comma-separated list 
of values that determine what font an element uses. Each font will 
fall into one of two categories, either a “font family name” like 
"Times New Roman" (we use quotes due to the whitespace between words) 
or a “generic family name” like sans-serif (generic family names never 
use quotes). If a browser cannot find or does not support the first 
font in a list, it will use the next one, then the next one and so on 
until it finds a supported and valid font. This is why it’s best 
practice to include a list of values for this property, starting with 
the font you want to be used most and ending with a generic font family 
as a fallback, e.g. font-family: "Times New Roman", sans-serif; 
font-size will, as the property name suggests, set the size of the font. 
When giving a value to this property, the value should not contain any 
whitespace, e.g. font-size: 22px has no space between “22” and “px”. 
font-weight affects the boldness of text, assuming the font supports 
the specified weight. This value can be a keyword, e.g. font-weight: 
bold, or a number between 1 and 1000, e.g. font-weight: 700 
(the equivalent of bold). Usually, the numeric values will be in 
increments of 100 up to 900, though this will depend on the font. 
text-align will align text horizontally within an element, and you can 
use the common keywords you may have come across in word processors as 
the value for this property, e.g. text-align: center.

By default, an <img> element’s height and width values will be the same 
as the actual image file’s height and width. If you wanted to adjust 
the size of the image without causing it to lose its proportions, you 
would use a value of “auto” for the height property and adjust the 
width value: For example, if an image’s original size was 500px height 
and 1000px width, using the above CSS would result in a height of 250px. 
It’s best to include both of these properties for <img> elements, even 
if you don’t plan on adjusting the values from the image file’s 
original ones. When these values aren’t included, if an image takes 
longer to load than the rest of the page contents, the image won’t take 
up any space on the page at first, but will suddenly cause a drastic 
shift of the other page contents once it does load in. Explicitly 
stating a height and width prevents this from happening, as space will 
be “reserved” on the page and will just appear as a blank space until 
the image loads. 

The cascade is what determines which rules actually get applied to our 
HTML. There are different factors that the cascade uses to determine 
this, three of which we’ll go over to hopefully help you avoid 
(as many of) those frustrating “I hate CSS” moments.

Specificity
A CSS declaration that is more specific will take precedence over less 
specific ones. Inline styles, which we will go over more in the Adding 
CSS to HTML section towards the end of the lesson, have the highest 
specificity compared to selectors, while each type of selector has its 
own specificity level that contributes to how specific a declaration is.
