Flexbox is a way to arrange items into rows or columns. These items 
will flex (i.e. grow or shrink) based on some simple rules that you 
can define. To get started, let’s look at a simple demonstration. For 
all the exercises here, take your time to inspect the code and really 
understand what’s going on. 

A Note on Comments: Comments prevent the browser from interpreting 
lines as code, and are wrapped between specific tags. CSS uses /*as an 
opening comment tag and */ as a closing comment tag, while HTML and 
JavaScript have their own syntax. Commented out lines of code can be 
‘re-enabled’ simply by removing the comment tags surrounding the code. 
All 3 divs should now be arranged horizontally. If you resize the 
results frame with the “1x”, “.5x” and “.25x” buttons you’ll also see 
that the divs will ‘flex’. They will fill the available area and will 
each have equal width. If you add another div to the HTML, inside of 
.flex-container, it will show up alongside the others, and everything 
will flex to fit within the available area. 

Flex Containers and Flex Items
As you’ve seen, flexbox is not just a single CSS property but a whole 
toolbox of properties that you can use to put things where you need 
them. Some of these properties belong on the flex container, while some 
go on the flex items. This is a simple yet important concept. A flex 
container is any element that has display: flex on it. A flex item is 
any element that lives directly inside of a flex container. 
Somewhat confusingly, any element can be both a flex container and a 
flex item. Said another way, you can also put display: flex on a flex 
item and then use flexbox to arrange its children. Creating and nesting 
multiple flex containers and items is the primary way we will be 
building up complex layouts. The following image was achieved using 
only flexbox to arrange, size, and place the various elements. Flexbox 
is a very powerful tool.